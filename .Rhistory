summary_df
a1 <- summary(gelman_alpha)
a1
ggplot(gelman_alpha_df, aes(x = 1:nrow(gelman_alpha_df), y = Point_Est)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("The Gelman-Rubin Reduction Factor for Alpha's") +
xlab('i') +
geom_point(alpha = 0.1, colour = "blue")
library(ggplot2)
ggplot(gelman_alpha_df, aes(x = 1:nrow(gelman_alpha_df), y = Point_Est)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("The Gelman-Rubin Reduction Factor for Alpha's") +
xlab('i') +
geom_point(alpha = 0.1, colour = "blue")
ggplot(gelman_alpha_df, aes(x = 1:nrow(gelman_alpha_df), y = Point_Est)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("The Gelman-Rubin Reduction Factor for Alpha's") +
xlab('i') + ylab('Gelman-Rubin Reduction Factor') +
geom_point(alpha = 0.1, colour = "blue")
ggplot(gelman_alpha_df, aes(x = 1:nrow(gelman_alpha_df), y = Point_Est)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("The Gelman-Rubin Reduction Factor for Alpha's") +
xlab('i') + ylab('Gelman-Rubin Reduction Factor') +
geom_point(alpha = 0.1, colour = "blue")
ggplot(gelman_beta_df, aes(x = 1:nrow(gelman_beta_df), y = Point_Est)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("The Gelman-Rubin Reduction Factor for Beta's") +
xlab('i') + ylab('Gelman-Rubin Reduction Factor') +
geom_point(alpha = 0.1, colour = "blue")
gelman_beta_df <- as.data.frame(gelman_beta)
colnames(gelman_beta_df) <- c('Point_Est', "Upper_CI")
ggplot(gelman_beta_df, aes(x = 1:nrow(gelman_beta_df), y = Point_Est)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("The Gelman-Rubin Reduction Factor for Beta's") +
xlab('i') + ylab('Gelman-Rubin Reduction Factor') +
geom_point(alpha = 0.1, colour = "blue")
gelman_delta_df <- as.data.frame(gelman_delta)
colnames(gelman_delta_df) <- c('Point_Est', "Upper_CI")
ggplot(gelman_delta_df, aes(x = 1:nrow(gelman_delta_df), y = Point_Est)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("The Gelman-Rubin Reduction Factor for Delta's") +
xlab('i') + ylab('Gelman-Rubin Reduction Factor') +
geom_point(alpha = 0.1, colour = "blue")
gelman_lambda_df <- as.data.frame(gelman_lambda)
colnames(gelman_lambda_df) <- c('Point_Est', "Upper_CI")
ggplot(gelman_lambda_df, aes(x = 1:nrow(gelman_lambda_df), y = Point_Est)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("The Gelman-Rubin Reduction Factor for Alpha's") +
xlab('i') + ylab('Gelman-Rubin Reduction Factor') +
geom_point(alpha = 0.1, colour = "blue")
gelman_lambda_df <- as.data.frame(gelman_lambda)
colnames(gelman_lambda_df) <- c('Point_Est', "Upper_CI")
ggplot(gelman_lambda_df, aes(x = 1:nrow(gelman_lambda_df), y = Point_Est)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("The Gelman-Rubin Reduction Factor for Lambda's") +
xlab('i') + ylab('Gelman-Rubin Reduction Factor') +
geom_point(alpha = 0.1, colour = "blue")
head(alpha_summary[[2]][,c(1,5)])
head(alpha_summary[[2]][,c(1,5)],5)
head(beta_summary[[2]][,c(1,5)],5)
head(delta_summary[[2]][,c(1,5)],5)
head(lambda_summary[[2]][,c(1,5)],5)
summary(alpha_summary[[2]][,c(1,5)])
head(alpha_summary[[2]][,c(1,5)],5)
head(beta_summary[[2]][,c(1,5)],5)
head(delta_summary[[2]][,c(1,5)],5)
head(lambda_summary[[2]][,c(1,5)],5)
library(gridExtra)
png("./alpha_ci_table.png", width=360,height=240)
grid.table(head(alpha_summary[[2]][,c(1,5)],5))
dev.off()
library(gridExtra)
png("./beta_ci_table.png", width=360,height=240)
grid.table(head(beta_summary[[2]][,c(1,5)],5))
dev.off()
library(gridExtra)
png("./delta_ci_table.png", width=360,height=240)
grid.table(head(delta_summary[[2]][,c(1,5)],5))
dev.off()
library(gridExtra)
png("./lambda_ci_table.png", width=360,height=240)
grid.table(head(lambda_summary[[2]][,c(1,5)],5))
dev.off()
dev.off()
head(alpha_summary[[2]][,c(1,5)],5)
head(beta_summary[[2]][,c(1,5)],5)
library(gridExtra)
png("./alpha_ci_table.png", width=360,height=240)
grid.table(head(alpha_summary[[2]][,c(1,5)],5))
dev.off()
library(gridExtra)
png("./beta_ci_table.png", width=360,height=240)
grid.table(head(beta_summary[[2]][,c(1,5)],5))
dev.off()
library(gridExtra)
png("./delta_ci_table.png", width=360,height=240)
grid.table(head(delta_summary[[2]][,c(1,5)],5))
dev.off()
library(gridExtra)
png("./lambda_ci_table.png", width=360,height=240)
grid.table(head(lambda_summary[[2]][,c(1,5)],5))
dev.off()
a_df <- head(alpha_summary[[2]][,c(1,5)],5)
class(a_df)
colnames(a_df) = c(1:5)
a_df <- as.data.frame(head(alpha_summary[[2]][,c(1,5)],5))
a_df
library(gridExtra)
png("./alpha_ci_table.png", width=360,height=240)
grid.table(as.data.frame(head(alpha_summary[[2]][,c(1,5)],5)))
dev.off()
library(gridExtra)
png("./beta_ci_table.png", width=360,height=240)
grid.table(as.data.frame(head(beta_summary[[2]][,c(1,5)],5)))
dev.off()
library(gridExtra)
png("./delta_ci_table.png", width=360,height=240)
grid.table(as.data.frame(head(delta_summary[[2]][,c(1,5)],5)))
dev.off()
library(gridExtra)
png("./lambda_ci_table.png", width=360,height=240)
grid.table(as.data.frame(head(lambda_summary[[2]][,c(1,5)],5)))
dev.off()
head(gelman_alpha, 5)
head(gelman_beta, 5)
head(gelman_delta, 5)
head(gelman_lambda, 5)
head(alpha_summary[[2]][,c(1,5)],5)
head(beta_summary[[2]][,c(1,5)],5)
head(delta_summary[[2]][,c(1,5)],5)
head(lambda_summary[[2]][,c(1,5)],5)
prob_df
head(prob_df)
ggplot(alpha_ci_df[1:10,], aes(y = 1:10, x = alpha)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("95% Credible Interval for first 10 Alpha values") +
xlab("Credible Interval") + ylab("i") +
geom_point(size = 2) +
geom_errorbarh(aes(xmax = U, xmin = L))
head(alpha_summary[[2]][,c(1,5)],5)
alpha_ci_df <- as.data.frame(alpha_summary[[2]][,c(1,5)])
colnames(alpha_ci_df) <- c("L","U")
alpha_ci_df$alpha <- alphaz
head(alpha_ci_df)
summary(alphas)
load("C:/Users/Michael/Dropbox/Projects/MCMC_Restaurant/output/alphaz.rda")
load("C:/Users/Michael/Dropbox/Projects/MCMC_Restaurant/output/betaz.rda")
alphaz
dim(alphaz)
class(alphaz)
summary(alphaz-betaz)
alpha_summary
alpha_summary$statistics
alpha_summary$statistics
head(alpha_summary)
alpha_summary$quantiles
head(alpha_summary$statistics)
head(alpha_summary)
dnorm(0.5)
dnorm(x = 0.5, mean = 0, sd = 1)
dnorm(x = 0, mean = 0, sd = 1)
?dnorm
qnorm(p = 0.975)
head(alpha_summary$statistics)
alpha_summary$quantiles
alpha_summary$statistics$mean[1]
head(alpha_summary$statistics)
alpha_summary$statistics$Mean[1]
alpha_summary$statistics$Mean
alpha_summary$statistics[1,"Mean"]
alpha_beta_ci = matrix(NA, ncol = 2, nrow = 15347)
for (i in 1:15147){
alpha_beta_ci[i,] = construct_ci(alpha_summary$statistics[i,"Mean"], beta_summary$statistics[i,"Mean"],
alpha_summary$statistics[i,"SD"], beta_summary$statistics[i,"SD"])
}
## Construct credible interval for the difference alpha_i - beta_i and delta_i - lambda_i
compute_v <- function(s_i, s_j, n_i = 5000, n_j = 5000) {
return(((s_i^2/n_i) + (s_j^2/n_j))^2/(s_i^4/(n_i^2*(ni-1))+s_j^4/(n_j^2*(n_j-1))))
}
construct_ci <- function(x_i, x_j, s_i, s_j, n_i = 5000, n_j = 5000, alpha = 0.95){
v = compute_v(s_i, s_j, n_i, n_j)
diff = x_i - x_j
t = qt(1-alpha/2, v)
se = sqrt(s_i^2/n_i + s_j^2/n_j)
l = diff - t*se
u = diff + t*se
return(c(l,u))
}
alpha_beta_ci = matrix(NA, ncol = 2, nrow = 15347)
for (i in 1:15147){
alpha_beta_ci[i,] = construct_ci(alpha_summary$statistics[i,"Mean"], beta_summary$statistics[i,"Mean"],
alpha_summary$statistics[i,"SD"], beta_summary$statistics[i,"SD"])
}
alpha_summary$statistics
head(alpha_summary)
head(alpha_summary$statistics)
head(beta_summary$statistics)
compute_v(0.5060033, 0.4747708)
compute_v <- function(s_i, s_j, n_i = 5000, n_j = 5000) {
return(((s_i^2/n_i) + (s_j^2/n_j))^2/(s_i^4/(n_i^2*(n_i-1))+s_j^4/(n_j^2*(n_j-1))))
}
compute_v(0.5060033, 0.4747708)
## Construct credible interval for the difference alpha_i - beta_i and delta_i - lambda_i
compute_v <- function(s_i, s_j, n_i = 5000, n_j = 5000) {
return(((s_i^2/n_i) + (s_j^2/n_j))^2/(s_i^4/(n_i^2*(n_i-1))+s_j^4/(n_j^2*(n_j-1))))
}
construct_ci <- function(x_i, x_j, s_i, s_j, n_i = 5000, n_j = 5000, alpha = 0.95){
v = compute_v(s_i, s_j, n_i, n_j)
diff = x_i - x_j
t = qt(1-alpha/2, v)
se = sqrt(s_i^2/n_i + s_j^2/n_j)
l = diff - t*se
u = diff + t*se
return(c(l,u))
}
alpha_beta_ci = matrix(NA, ncol = 2, nrow = 15347)
for (i in 1:15147){
alpha_beta_ci[i,] = construct_ci(alpha_summary$statistics[i,"Mean"], beta_summary$statistics[i,"Mean"],
alpha_summary$statistics[i,"SD"], beta_summary$statistics[i,"SD"])
}
delta_lambda_ci = matrix(NA, ncol = 2, nrow = 15347)
for (i in 1:15147){
alpha_beta_ci[i,] = construct_ci(delta_summary$statistics[i,"Mean"], lambda_summary$statistics[i,"Mean"],
delta_summary$statistics[i,"SD"], lambda_summary$statistics[i,"SD"])
}
alpha_beta_ci = matrix(NA, ncol = 2, nrow = 15347)
for (i in 1:15147){
alpha_beta_ci[i,] = construct_ci(alpha_summary$statistics[i,"Mean"], beta_summary$statistics[i,"Mean"],
alpha_summary$statistics[i,"SD"], beta_summary$statistics[i,"SD"])
}
delta_lambda_ci = matrix(NA, ncol = 2, nrow = 15347)
for (i in 1:15147){
delta_lambda_ci[i,] = construct_ci(delta_summary$statistics[i,"Mean"], lambda_summary$statistics[i,"Mean"],
delta_summary$statistics[i,"SD"], lambda_summary$statistics[i,"SD"])
}
head(alpha_beta_ci)
head(delta_lambda_ci)
summary(alpha_beta_ci)
summary(delta_lambda_ci)
1-0.95/2
(1-0.95)/2
compute_v <- function(s_i, s_j, n_i = 5000, n_j = 5000) {
return(((s_i^2/n_i) + (s_j^2/n_j))^2/(s_i^4/(n_i^2*(n_i-1))+s_j^4/(n_j^2*(n_j-1))))
}
construct_ci <- function(x_i, x_j, s_i, s_j, n_i = 5000, n_j = 5000, alpha = 0.95){
v = compute_v(s_i, s_j, n_i, n_j)
diff = x_i - x_j
t = qt((1-alpha)/2, v)
se = sqrt(s_i^2/n_i + s_j^2/n_j)
l = diff - t*se
u = diff + t*se
return(c(l,u))
}
alpha_beta_ci = matrix(NA, ncol = 2, nrow = 15347)
for (i in 1:15147){
alpha_beta_ci[i,] = construct_ci(alpha_summary$statistics[i,"Mean"], beta_summary$statistics[i,"Mean"],
alpha_summary$statistics[i,"SD"], beta_summary$statistics[i,"SD"])
}
delta_lambda_ci = matrix(NA, ncol = 2, nrow = 15347)
for (i in 1:15147){
delta_lambda_ci[i,] = construct_ci(delta_summary$statistics[i,"Mean"], lambda_summary$statistics[i,"Mean"],
delta_summary$statistics[i,"SD"], lambda_summary$statistics[i,"SD"])
}
head(alpha_beta_ci)
head(delta_lambda_ci)
summary(alpha_beta_ci)
summary(alpha_beta_ci)
compute_v <- function(s_i, s_j, n_i = 5001, n_j = 5001) {
return(((s_i^2/n_i) + (s_j^2/n_j))^2/(s_i^4/(n_i^2*(n_i-1))+s_j^4/(n_j^2*(n_j-1))))
}
construct_ci <- function(x_i, x_j, s_i, s_j, n_i = 5001, n_j = 5001, alpha = 0.95){
v = compute_v(s_i, s_j, n_i, n_j)
diff = x_i - x_j
t = qt((1-alpha)/2, v)
se = sqrt(s_i^2/n_i + s_j^2/n_j)
l = diff - t*se
u = diff + t*se
return(c(l,u))
}
alpha_beta_ci = matrix(NA, ncol = 2, nrow = 15347)
for (i in 1:15347){
alpha_beta_ci[i,] = construct_ci(alpha_summary$statistics[i,"Mean"], beta_summary$statistics[i,"Mean"],
alpha_summary$statistics[i,"SD"], beta_summary$statistics[i,"SD"])
}
delta_lambda_ci = matrix(NA, ncol = 2, nrow = 15347)
for (i in 1:15347){
delta_lambda_ci[i,] = construct_ci(delta_summary$statistics[i,"Mean"], lambda_summary$statistics[i,"Mean"],
delta_summary$statistics[i,"SD"], lambda_summary$statistics[i,"SD"])
}
head(alpha_beta_ci)
head(delta_lambda_ci)
t(0.25)
qt(0.25)
qt(p = 0.25, 100)
qt(0.975, 100)
qt(p = 0.25, 100000)
qt(0.975, 100000)
qt(p = 0.025, 100000)
(1-0.95)/2
compute_v <- function(s_i, s_j, n_i = 5001, n_j = 5001) {
return(((s_i^2/n_i) + (s_j^2/n_j))^2/(s_i^4/(n_i^2*(n_i-1))+s_j^4/(n_j^2*(n_j-1))))
}
construct_ci <- function(x_i, x_j, s_i, s_j, n_i = 5001, n_j = 5001, alpha = 0.95){
v = compute_v(s_i, s_j, n_i, n_j)
diff = x_i - x_j
t = qt((1-alpha)/2, v)
se = sqrt(s_i^2/n_i + s_j^2/n_j)
l = diff - t*se
u = diff + t*se
return(c(l,u))
}
alpha_beta_ci = matrix(NA, ncol = 2, nrow = 15347)
for (i in 1:15347){
alpha_beta_ci[i,] = construct_ci(alpha_summary$statistics[i,"Mean"], beta_summary$statistics[i,"Mean"],
alpha_summary$statistics[i,"SD"], beta_summary$statistics[i,"SD"])
}
delta_lambda_ci = matrix(NA, ncol = 2, nrow = 15347)
for (i in 1:15347){
delta_lambda_ci[i,] = construct_ci(delta_summary$statistics[i,"Mean"], lambda_summary$statistics[i,"Mean"],
delta_summary$statistics[i,"SD"], lambda_summary$statistics[i,"SD"])
}
head(alpha_beta_ci)
head(delta_lambda_ci)
exp(-0.321)
exp(-1.8972)
summary(alpha_beta_ci)
exp(-0.14149)/1-exp(-0.14149)
exp(-0.05501)/1-exp(-0.05501)
head(alpha_beta_ci)
head(delta_lambda_ci)
head(exp(alpha_beta_ci))
head(exp(alpha_beta_ci)/(1-exp(alpha_beta_ci)))
head(exp(-0.10262094)/(1-exp(-0.10262094)))
head(alpha_beta_ci)
head(delta_lambda_ci)
exp(-0.05501)/1-exp(-0.05501)
exp(-0.07703165)/1-exp(-0.07703165)
exp(-0.07703165)/(1-exp(-0.07703165))
exp(-0.07703165)/(1+exp(-0.07703165))
head(exp(alpha_beta_ci)/(1+exp(alpha_beta_ci)))
head(alpha_beta_ci)
head(exp(alpha_beta_ci)/(1+exp(alpha_beta_ci)))
head(exp(delta_lambda_ci))
head(delta_lambda_ci)
head(exp(delta_lambda_ci))
head(alpha_beta_ci)
1 + c(1,2)
head(exp(betaz + betaalpha_beta_ci)/(1+exp(betaz + alpha_beta_ci)))
head(exp(betaz + alpha_beta_ci)/(1+exp(betaz + alpha_beta_ci)))
compute_v <- function(s_i, s_j, n_i = 5001, n_j = 5001) {
return(((s_i^2/n_i) + (s_j^2/n_j))^2/(s_i^4/(n_i^2*(n_i-1))+s_j^4/(n_j^2*(n_j-1))))
}
construct_ci <- function(x_i, x_j, s_i, s_j, n_i = 5001, n_j = 5001, alpha = 0.95){
v = compute_v(s_i, s_j, n_i, n_j)
diff = log(x_i - x_j)
t = qt((1-alpha)/2, v)
se = sqrt(s_i^2/n_i + s_j^2/n_j)
l = diff - t*se
u = diff + t*se
return(c(l,u))
}
alpha_beta_ci = matrix(NA, ncol = 2, nrow = 15347)
for (i in 1:15347){
alpha_beta_ci[i,] = construct_ci(alpha_summary$statistics[i,"Mean"], beta_summary$statistics[i,"Mean"],
alpha_summary$statistics[i,"SD"], beta_summary$statistics[i,"SD"])
}
delta_lambda_ci = matrix(NA, ncol = 2, nrow = 15347)
for (i in 1:15347){
delta_lambda_ci[i,] = construct_ci(delta_summary$statistics[i,"Mean"], lambda_summary$statistics[i,"Mean"],
delta_summary$statistics[i,"SD"], lambda_summary$statistics[i,"SD"])
}
head(alpha_beta_ci)
head(exp(alpha_beta_ci)/(1+exp(betaz + alpha_beta_ci)))
warning()
warnings()
## Construct credible interval for the difference alpha_i - beta_i and delta_i - lambda_i
compute_v <- function(s_i, s_j, n_i = 5001, n_j = 5001) {
return(((s_i^2/n_i) + (s_j^2/n_j))^2/(s_i^4/(n_i^2*(n_i-1))+s_j^4/(n_j^2*(n_j-1))))
}
construct_ci <- function(x_i, x_j, s_i, s_j, n_i = 5001, n_j = 5001, alpha = 0.95){
v = compute_v(s_i, s_j, n_i, n_j)
diff = x_i - x_j
t = qt((1-alpha)/2, v)
se = sqrt(s_i^2/n_i + s_j^2/n_j)
l = diff - t*se
u = diff + t*se
return(c(l,u))
}
alpha_beta_ci = matrix(NA, ncol = 2, nrow = 15347)
for (i in 1:15347){
alpha_beta_ci[i,] = construct_ci(alpha_summary$statistics[i,"Mean"], beta_summary$statistics[i,"Mean"],
alpha_summary$statistics[i,"SD"], beta_summary$statistics[i,"SD"])
}
delta_lambda_ci = matrix(NA, ncol = 2, nrow = 15347)
for (i in 1:15347){
delta_lambda_ci[i,] = construct_ci(delta_summary$statistics[i,"Mean"], lambda_summary$statistics[i,"Mean"],
delta_summary$statistics[i,"SD"], lambda_summary$statistics[i,"SD"])
}
head(alpha_beta_ci)
head(delta_lambda_ci)
## ECDF of Theta
ggplot(param_df,aes(x = theta)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("Infraction Potential Based on \n Establishment's Location") +
xlab("Infraction potential") + ylab("Empirical Distribution Function") +
stat_ecdf(data = subset(param_df, IsED == 1), aes(colour = "Downtown")) +
stat_ecdf(data = subset(param_df, IsED == 0), aes(colour = "Elsewhere")) +
scale_colour_manual(name = "Region", values = c(Downtown = "red", Elsewhere = "blue"))
ggplot(param_df,aes(x = psi)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("ECDF of Expected Rate of Non-Compliance") +
xlab("Infraction Count") + ylab("Empirical Distribution Function") +
stat_ecdf(data = subset(param_df, IsED == 1), aes(colour = "Downtown")) +
stat_ecdf(data = subset(param_df, IsED == 0), aes(colour = "Elsewhere")) +
scale_colour_manual(name = "Region", values = c(Downtown = "red", Elsewhere = "blue"))
ggplot(param_df,aes(x = psi)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("ECDF of Expected Count of Non-Compliance") +
xlab("Infraction Count") + ylab("Empirical Distribution Function") +
stat_ecdf(data = subset(param_df, IsED == 1), aes(colour = "Downtown")) +
stat_ecdf(data = subset(param_df, IsED == 0), aes(colour = "Elsewhere")) +
scale_colour_manual(name = "Region", values = c(Downtown = "red", Elsewhere = "blue"))
ggplot(param_df,aes(x = min_ins_psi)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("Expected Count of Non-Compliance during \n Minimum Required Inspection") +
xlab("Infraction Count") + ylab("Count") +
geom_histogram(data = subset(param_df, IsED == 1), aes(fill = "Downtown"), alpha = 0.2) +
geom_histogram(data = subset(param_df, IsED == 0), aes(fill = "Elsewhere"), alpha = 0.2) +
scale_fill_manual(name = "Region", values = c(Downtown = "red", Elsewhere = "blue"))
ggplot(param_df,aes(x = min_ins_psi)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("Expected Count of Non-Compliance during \n Minimum Required Inspection") +
xlab("Infraction Count") + ylab("Density") +
geom_histogram(data = subset(param_df, IsED == 1), aes(y = ..count../sum(..count..), fill = "Downtown"), position="identity", alpha = 0.2) +
geom_histogram(data = subset(param_df, IsED == 0), aes(y = ..count../sum(..count..), fill = "Elsewhere"), position="identity", alpha = 0.2) +
scale_fill_manual(name = "Region", values = c(Downtown = "red", Elsewhere = "blue"))
ggplot(param_df,aes(x = min_ins_theta)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("Infraction Potential in Minimum Required Inspection") +
xlab("Infraction potential") + ylab("Empirical Distribution Function") +
stat_ecdf(data = subset(param_df, IsED == 1), aes(colour = "Downtown")) +
stat_ecdf(data = subset(param_df, IsED == 0), aes(colour = "Elsewhere")) +
scale_colour_manual(name = "Region", values = c(Downtown = "red", Elsewhere = "blue"))
ggplot(param_df,aes(x = min_ins_psi)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("ECDF of Expected Count of Non-Compliance") +
xlab("Infraction Count") + ylab("Empirical Distribution Function") +
stat_ecdf(data = subset(param_df, IsED == 1), aes(colour = "Downtown")) +
stat_ecdf(data = subset(param_df, IsED == 0), aes(colour = "Elsewhere")) +
scale_colour_manual(name = "Region", values = c(Downtown = "red", Elsewhere = "blue")) +
scale_x_continuous(breaks=seq(0,10,1))
ggplot(param_df,aes(x = min_ins_psi)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("ECDF of Expected Count of Non-Compliance") +
xlab("Infraction Count") + ylab("Empirical Distribution Function") +
stat_ecdf(data = subset(param_df, IsED == 1), aes(colour = "Downtown")) +
stat_ecdf(data = subset(param_df, IsED == 0), aes(colour = "Elsewhere")) +
scale_colour_manual(name = "Region", values = c(Downtown = "red", Elsewhere = "blue")) +
scale_x_continuous(breaks=seq(0,10,1))
ggplot(param_df,aes(x = min_ins_psi)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("ECDF of Expected Count of Non-Compliance \n during Minimum Required Inspections") +
xlab("Infraction Count") + ylab("Empirical Distribution Function") +
stat_ecdf(data = subset(param_df, IsED == 1), aes(colour = "Downtown")) +
stat_ecdf(data = subset(param_df, IsED == 0), aes(colour = "Elsewhere")) +
scale_colour_manual(name = "Region", values = c(Downtown = "red", Elsewhere = "blue")) +
scale_x_continuous(breaks=seq(0,10,1))
ggplot(param_df,aes(x = min_ins_theta)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("Infraction Potential in Minimum Required Inspection") +
xlab("Infraction potential") + ylab("Empirical Distribution Function") +
stat_ecdf(data = subset(param_df, IsED == 1), aes(colour = "Downtown")) +
stat_ecdf(data = subset(param_df, IsED == 0), aes(colour = "Elsewhere")) +
scale_colour_manual(name = "Region", values = c(Downtown = "red", Elsewhere = "blue"))
ggplot(param_df,aes(x = min_ins_psi)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("ECDF of Expected Count of Non-Compliance \n during Minimum Required Inspections") +
xlab("Infraction Count") + ylab("Empirical Distribution Function") +
stat_ecdf(data = subset(param_df, IsED == 1), aes(colour = "Downtown")) +
stat_ecdf(data = subset(param_df, IsED == 0), aes(colour = "Elsewhere")) +
scale_colour_manual(name = "Region", values = c(Downtown = "red", Elsewhere = "blue")) +
scale_x_continuous(breaks=seq(0,10,1))
library(ggplot2)
ggplot(param_df,aes(x = min_ins_psi)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("Expected Count of Non-Compliance during in Minimum Required Inspection") +
xlab("Infraction Count") + ylab("Density") +
geom_histogram(data = subset(param_df, IsED == 1), aes(y = ..count../sum(..count..), fill = "Downtown"), position="identity", alpha = 0.2) +
geom_histogram(data = subset(param_df, IsED == 0), aes(y = ..count../sum(..count..), fill = "Elsewhere"), position="identity", alpha = 0.2) +
scale_fill_manual(name = "Region", values = c(Downtown = "red", Elsewhere = "blue"))
ggplot(param_df,aes(x = min_ins_psi)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("Expected Count of Non-Compliance \n during Minimum Required Inspection") +
xlab("Infraction Count") + ylab("Density") +
geom_histogram(data = subset(param_df, IsED == 1), aes(y = ..count../sum(..count..), fill = "Downtown"), position="identity", alpha = 0.2) +
geom_histogram(data = subset(param_df, IsED == 0), aes(y = ..count../sum(..count..), fill = "Elsewhere"), position="identity", alpha = 0.2) +
scale_fill_manual(name = "Region", values = c(Downtown = "red", Elsewhere = "blue"))
ggplot(param_df,aes(x = min_ins_psi)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("Expected Count of Non-Compliance \n during Minimum Required Inspection") +
xlab("Infraction Count") + ylab("Density") +
geom_histogram(data = subset(param_df, IsED == 1), aes(y = ..count../sum(..count..), fill = "Downtown"), position="identity", alpha = 0.2) +
geom_histogram(data = subset(param_df, IsED == 0), aes(y = ..count../sum(..count..), fill = "Elsewhere"), position="identity", alpha = 0.2) +
scale_fill_manual(name = "Region", values = c(Downtown = "red", Elsewhere = "blue"))
ggplot(param_df,aes(x = min_ins_psi)) +
theme_update(plot.title = element_text(hjust = 0.5)) +
ggtitle("ECDF of Expected Count of Non-Compliance \n during Minimum Required Inspections") +
xlab("Infraction Count") + ylab("Empirical Distribution Function") +
stat_ecdf(data = subset(param_df, IsED == 1), aes(colour = "Downtown")) +
stat_ecdf(data = subset(param_df, IsED == 0), aes(colour = "Elsewhere")) +
scale_colour_manual(name = "Region", values = c(Downtown = "red", Elsewhere = "blue")) +
scale_x_continuous(breaks=seq(0,10,1))
